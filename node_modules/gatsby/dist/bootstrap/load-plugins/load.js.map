{"version":3,"sources":["../../../src/bootstrap/load-plugins/load.ts"],"names":["GATSBY_CLOUD_PLUGIN_NAME","TYPESCRIPT_PLUGIN_NAME","createFileContentHash","root","globPattern","hash","crypto","createHash","files","glob","sync","nodir","forEach","filepath","update","fs","readFileSync","digest","createPluginId","name","pluginObject","JSON","stringify","options","resolvePlugin","plugin","rootDir","pluginName","_","isString","resolve","parentDir","resolvedPath","path","join","packageJSON","parse","id","version","Error","requireSource","require","dirname","isAbsolute","err","process","env","gatsby_log_level","reporter","panicOnBuild","addGatsbyPluginCloudPluginWhenInstalled","plugins","processPlugin","cloudPluginLocation","push","incompatibleGatsbyCloudPlugin","find","semver","satisfies","includePrerelease","loadPlugins","config","configuredPluginNames","Set","info","pluginOptions","isEmpty","option","subPluginPaths","subPluginPath","segments","split","roots","pathToSwap","segment","slice","length","flat","map","processed","set","modulePath","module","Array","from","undefined","merge","internalPlugins","filter","Boolean","relPath","absPath","__dirname","processedPlugin","add","pathCheck","has","panic","GATSBY_CLOUD","allExtensions","isTSX","jsxPragma","cwd","program","store","getState","pageCreatorOptions","directory","pageCreatorPlugin"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\nimport { slash, createRequireFromPath } from \"gatsby-core-utils\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport crypto from \"crypto\"\nimport glob from \"glob\"\nimport { sync as existsSync } from \"fs-exists-cached\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { silent as resolveFromSilent } from \"resolve-from\"\nimport * as semver from \"semver\"\nimport { warnOnIncompatiblePeerDependency } from \"./validate\"\nimport { store } from \"../../redux\"\nimport { createNodeId } from \"../../utils/create-node-id\"\nimport {\n  IPluginInfo,\n  PluginRef,\n  IPluginRefObject,\n  IPluginRefOptions,\n  ISiteConfig,\n} from \"./types\"\nimport { PackageJson } from \"../../..\"\n\nconst GATSBY_CLOUD_PLUGIN_NAME = `gatsby-plugin-gatsby-cloud`\nconst TYPESCRIPT_PLUGIN_NAME = `gatsby-plugin-typescript`\n\nfunction createFileContentHash(root: string, globPattern: string): string {\n  const hash = crypto.createHash(`md5`)\n  const files = glob.sync(`${root}/${globPattern}`, { nodir: true })\n\n  files.forEach(filepath => {\n    hash.update(fs.readFileSync(filepath))\n  })\n\n  return hash.digest(`hex`)\n}\n\n/**\n * Make sure key is unique to plugin options. E.g. there could\n * be multiple source-filesystem plugins, with different names\n * (docs, blogs).\n *\n * @param name Name of the plugin\n * @param pluginObject Object of the plugin\n */\nconst createPluginId = (\n  name: string,\n  pluginObject: IPluginRefObject | null = null\n): string =>\n  createNodeId(\n    name + (pluginObject ? JSON.stringify(pluginObject.options) : ``),\n    `Plugin`\n  )\n\n/**\n * @param plugin\n * This should be a plugin spec object where possible but can also be the\n * name of a plugin.\n *\n * When it is a name, it can be a name of a local plugin, the name of a plugin\n * located in node_modules, or a Gatsby internal plugin. In the last case the\n * plugin will be an absolute path.\n * @param rootDir\n * This is the project location, from which are found the plugins\n */\nexport function resolvePlugin(\n  plugin: PluginRef,\n  rootDir: string | null\n): IPluginInfo {\n  const pluginName = _.isString(plugin) ? plugin : plugin.resolve\n\n  // Respect the directory that the plugin was sourced from initially\n  rootDir = (!_.isString(plugin) && plugin.parentDir) || rootDir\n\n  // Only find plugins when we're not given an absolute path\n  if (!existsSync(pluginName) && rootDir) {\n    // Find the plugin in the local plugins folder\n    const resolvedPath = slash(path.join(rootDir, `plugins/${pluginName}`))\n\n    if (existsSync(resolvedPath)) {\n      if (existsSync(`${resolvedPath}/package.json`)) {\n        const packageJSON = JSON.parse(\n          fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n        ) as PackageJson\n        const name = packageJSON.name || pluginName\n        warnOnIncompatiblePeerDependency(name, packageJSON)\n\n        return {\n          resolve: resolvedPath,\n          name,\n          id: createPluginId(name),\n          version:\n            packageJSON.version || createFileContentHash(resolvedPath, `**`),\n        }\n      } else {\n        // Make package.json a requirement for local plugins too\n        throw new Error(`Plugin ${pluginName} requires a package.json file`)\n      }\n    }\n  }\n\n  /**\n   * Here we have an absolute path to an internal plugin, or a name of a module\n   * which should be located in node_modules.\n   */\n  try {\n    const requireSource =\n      rootDir !== null\n        ? createRequireFromPath(`${rootDir}/:internal:`)\n        : require\n\n    // If the path is absolute, resolve the directory of the internal plugin,\n    // otherwise resolve the directory containing the package.json\n    const resolvedPath = slash(\n      path.dirname(\n        requireSource.resolve(\n          path.isAbsolute(pluginName)\n            ? pluginName\n            : `${pluginName}/package.json`\n        )\n      )\n    )\n\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n    )\n    warnOnIncompatiblePeerDependency(packageJSON.name, packageJSON)\n\n    return {\n      resolve: resolvedPath,\n      id: createPluginId(packageJSON.name),\n      name: packageJSON.name,\n      version: packageJSON.version,\n    }\n  } catch (err) {\n    if (process.env.gatsby_log_level === `verbose`) {\n      reporter.panicOnBuild(\n        `plugin \"${pluginName} threw the following error:\\n`,\n        err\n      )\n    } else {\n      reporter.panicOnBuild(\n        `There was a problem loading plugin \"${pluginName}\". Perhaps you need to install its package?\\nUse --verbose to see actual error.`\n      )\n    }\n    throw new Error(`unreachable`)\n  }\n}\n\nfunction addGatsbyPluginCloudPluginWhenInstalled(\n  plugins: Array<IPluginInfo>,\n  processPlugin: (plugin: PluginRef) => IPluginInfo,\n  rootDir: string\n): void {\n  const cloudPluginLocation = resolveFromSilent(\n    rootDir,\n    GATSBY_CLOUD_PLUGIN_NAME\n  )\n\n  if (cloudPluginLocation) {\n    plugins.push(\n      processPlugin({\n        resolve: cloudPluginLocation,\n        options: {},\n      })\n    )\n  }\n}\n\nfunction incompatibleGatsbyCloudPlugin(plugins: Array<IPluginInfo>): boolean {\n  const plugin = plugins.find(\n    plugin => plugin.name === GATSBY_CLOUD_PLUGIN_NAME\n  )\n\n  return !semver.satisfies(plugin!.version, `>=4.0.0-alpha`, {\n    includePrerelease: true,\n  })\n}\n\nexport function loadPlugins(\n  config: ISiteConfig = {},\n  rootDir: string\n): Array<IPluginInfo> {\n  // Instantiate plugins.\n  const plugins: Array<IPluginInfo> = []\n  const configuredPluginNames = new Set()\n\n  // Create fake little site with a plugin for testing this\n  // w/ snapshots. Move plugin processing to its own module.\n  // Also test adding to redux store.\n  function processPlugin(plugin: PluginRef): IPluginInfo {\n    if (_.isString(plugin)) {\n      const info = resolvePlugin(plugin, rootDir)\n\n      return {\n        ...info,\n        pluginOptions: {\n          plugins: [],\n        },\n      }\n    } else {\n      plugin.options = plugin.options || {}\n\n      // Throw an error if there is an \"option\" key.\n      if (\n        _.isEmpty(plugin.options) &&\n        !_.isEmpty((plugin as { option?: unknown }).option)\n      ) {\n        throw new Error(\n          `Plugin \"${plugin.resolve}\" has an \"option\" key in the configuration. Did you mean \"options\"?`\n        )\n      }\n\n      // Plugins can have plugins.\n      if (plugin.subPluginPaths) {\n        for (const subPluginPath of plugin.subPluginPaths) {\n          const segments = subPluginPath.split(`.`)\n          let roots: Array<any> = [plugin.options]\n\n          let pathToSwap = segments\n\n          for (const segment of segments) {\n            if (segment === `[]`) {\n              pathToSwap = pathToSwap.slice(0, pathToSwap.length - 1)\n              roots = roots.flat()\n            } else {\n              roots = roots.map(root => root[segment])\n            }\n          }\n\n          const processed = roots.map(processPlugin)\n          _.set(plugin.options, pathToSwap, processed)\n        }\n      }\n\n      // Add some default values for tests as we don't actually\n      // want to try to load anything during tests.\n      if (plugin.resolve === `___TEST___`) {\n        const name = `TEST`\n\n        return {\n          id: createPluginId(name, plugin),\n          name,\n          version: `0.0.0-test`,\n          pluginOptions: {\n            plugins: [],\n          },\n          resolve: `__TEST__`,\n        }\n      }\n\n      const info = resolvePlugin(plugin, rootDir)\n\n      return {\n        ...info,\n        modulePath: plugin.modulePath,\n        module: plugin.module,\n        subPluginPaths: plugin.subPluginPaths\n          ? Array.from(plugin.subPluginPaths)\n          : undefined,\n        id: createPluginId(info.name, plugin),\n        pluginOptions: _.merge({ plugins: [] }, plugin.options),\n      }\n    }\n  }\n\n  // Add internal plugins\n  const internalPlugins = [\n    `../../internal-plugins/dev-404-page`,\n    `../../internal-plugins/load-babel-config`,\n    `../../internal-plugins/internal-data-bridge`,\n    `../../internal-plugins/prod-404`,\n    `../../internal-plugins/webpack-theme-component-shadowing`,\n    `../../internal-plugins/bundle-optimisations`,\n    `../../internal-plugins/functions`,\n  ].filter(Boolean) as Array<string>\n  internalPlugins.forEach(relPath => {\n    const absPath = path.join(__dirname, relPath)\n    plugins.push(processPlugin(absPath))\n  })\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      const processedPlugin = processPlugin(plugin)\n      plugins.push(processedPlugin)\n      configuredPluginNames.add(processedPlugin.name)\n    })\n  }\n\n  // the order of all of these page-creators matters. The \"last plugin wins\",\n  // so the user's site comes last, and each page-creator instance has to\n  // match the plugin definition order before that. This works fine for themes\n  // because themes have already been added in the proper order to the plugins\n  // array\n  plugins.forEach(plugin => {\n    plugins.push(\n      processPlugin({\n        resolve: require.resolve(`gatsby-plugin-page-creator`),\n        options: {\n          path: slash(path.join(plugin.resolve, `src/pages`)),\n          pathCheck: false,\n        },\n      })\n    )\n  })\n\n  if (\n    _CFLAGS_.GATSBY_MAJOR === `4` &&\n    configuredPluginNames.has(GATSBY_CLOUD_PLUGIN_NAME) &&\n    incompatibleGatsbyCloudPlugin(plugins)\n  ) {\n    reporter.panic(\n      `Plugin gatsby-plugin-gatsby-cloud is not compatible with your gatsby version. Please upgrade to gatsby-plugin-gatsby-cloud@alpha-9689ff`\n    )\n  }\n\n  if (\n    !configuredPluginNames.has(GATSBY_CLOUD_PLUGIN_NAME) &&\n    (process.env.GATSBY_CLOUD === `true` || process.env.GATSBY_CLOUD === `1`)\n  ) {\n    addGatsbyPluginCloudPluginWhenInstalled(plugins, processPlugin, rootDir)\n  }\n\n  // Suppor Typescript by default but allow users to override it\n  if (!configuredPluginNames.has(TYPESCRIPT_PLUGIN_NAME)) {\n    plugins.push(\n      processPlugin({\n        resolve: require.resolve(TYPESCRIPT_PLUGIN_NAME),\n        options: {\n          // TODO(@mxstbr): Do not hard-code these defaults but infer them from the\n          // pluginOptionsSchema of gatsby-plugin-typescript\n          allExtensions: false,\n          isTSX: false,\n          jsxPragma: `React`,\n        },\n      })\n    )\n  }\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: createPluginId(`default-site-plugin`),\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n  })\n\n  const program = store.getState().program\n\n  // default options for gatsby-plugin-page-creator\n  let pageCreatorOptions: IPluginRefOptions | undefined = {\n    path: slash(path.join(program.directory, `src/pages`)),\n    pathCheck: false,\n  }\n\n  if (config.plugins) {\n    const pageCreatorPlugin = config.plugins.find(\n      (plugin): plugin is IPluginRefObject =>\n        typeof plugin !== `string` &&\n        plugin.resolve === `gatsby-plugin-page-creator` &&\n        slash((plugin.options && plugin.options.path) || ``) ===\n          slash(path.join(program.directory, `src/pages`))\n    )\n    if (pageCreatorPlugin) {\n      // override the options if there are any user specified options\n      pageCreatorOptions = pageCreatorPlugin.options\n    }\n  }\n\n  plugins.push(\n    processPlugin({\n      resolve: require.resolve(`gatsby-plugin-page-creator`),\n      options: pageCreatorOptions,\n    })\n  )\n\n  return plugins\n}\n"],"file":"load.js"}