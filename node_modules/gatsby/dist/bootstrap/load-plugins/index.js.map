{"version":3,"sources":["../../../src/bootstrap/load-plugins/index.ts"],"names":["getAPI","api","_","keys","reduce","merged","key","flattenPlugins","plugins","flattened","extractPlugins","plugin","subPluginPaths","subPluginPath","segments","split","roots","pluginOptions","segment","flat","map","root","forEach","subPlugin","push","normalizePlugin","resolve","options","normalizePlugins","normalizeConfig","config","loadPlugins","rawConfig","rootDir","currentAPIs","browser","browserAPIs","node","nodeAPIs","ssr","ssrAPIs","pluginInfos","pluginArray","x","flattenedPlugins","badExports","store","dispatch","type","payload"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\n\nimport { store } from \"../../redux\"\nimport { IGatsbyState } from \"../../redux/types\"\nimport * as nodeAPIs from \"../../utils/api-node-docs\"\nimport * as browserAPIs from \"../../utils/api-browser-docs\"\nimport ssrAPIs from \"../../../cache-dir/api-ssr-docs\"\nimport { loadPlugins as loadPluginsInternal } from \"./load\"\nimport {\n  collatePluginAPIs,\n  handleBadExports,\n  handleMultipleReplaceRenderers,\n  ExportType,\n  ICurrentAPIs,\n  validateConfigPluginsOptions,\n} from \"./validate\"\nimport {\n  IPluginInfo,\n  IFlattenedPlugin,\n  ISiteConfig,\n  IRawSiteConfig,\n} from \"./types\"\nimport { IPluginRefObject, PluginRef } from \"gatsby-plugin-utils/dist/types\"\n\nconst getAPI = (\n  api: { [exportType in ExportType]: { [api: string]: boolean } }\n): ICurrentAPIs =>\n  _.keys(api).reduce<Partial<ICurrentAPIs>>((merged, key) => {\n    merged[key] = _.keys(api[key])\n    return merged\n  }, {}) as ICurrentAPIs\n\n// Create a \"flattened\" array of plugins with all subplugins\n// brought to the top-level. This simplifies running gatsby-* files\n// for subplugins.\nconst flattenPlugins = (plugins: Array<IPluginInfo>): Array<IPluginInfo> => {\n  const flattened: Array<IPluginInfo> = []\n  const extractPlugins = (plugin: IPluginInfo): void => {\n    if (plugin.subPluginPaths) {\n      for (const subPluginPath of plugin.subPluginPaths) {\n        // @pieh:\n        // subPluginPath can look like someOption.randomFieldThatIsMarkedAsSubplugins\n        // Reason for doing stringified path with . separator was that it was just easier to prevent duplicates\n        // in subPluginPaths array (as each subplugin in the gatsby-config would add subplugin path).\n        const segments = subPluginPath.split(`.`)\n        let roots: Array<any> = [plugin.pluginOptions]\n        for (const segment of segments) {\n          if (segment === `[]`) {\n            roots = roots.flat()\n          } else {\n            roots = roots.map(root => root[segment])\n          }\n        }\n\n        roots.forEach(subPlugin => {\n          flattened.push(subPlugin)\n          extractPlugins(subPlugin)\n        })\n      }\n    }\n  }\n\n  plugins.forEach(plugin => {\n    flattened.push(plugin)\n    extractPlugins(plugin)\n  })\n\n  return flattened\n}\n\nfunction normalizePlugin(plugin): IPluginRefObject {\n  if (typeof plugin === `string`) {\n    return {\n      resolve: plugin,\n      options: {},\n    }\n  }\n\n  if (plugin.options?.plugins) {\n    plugin.options = {\n      ...plugin.options,\n      plugins: normalizePlugins(plugin.options.plugins),\n    }\n  }\n\n  return plugin\n}\n\nfunction normalizePlugins(plugins?: Array<PluginRef>): Array<IPluginRefObject> {\n  return (plugins || []).map(normalizePlugin)\n}\n\nconst normalizeConfig = (config: IRawSiteConfig = {}): ISiteConfig => {\n  return {\n    ...config,\n    plugins: (config.plugins || []).map(normalizePlugin),\n  }\n}\n\nexport async function loadPlugins(\n  rawConfig: IRawSiteConfig = {},\n  rootDir: string\n): Promise<Array<IFlattenedPlugin>> {\n  // Turn all strings in plugins: [`...`] into the { resolve: ``, options: {} } form\n  const config = normalizeConfig(rawConfig)\n\n  // Show errors for invalid plugin configuration\n  await validateConfigPluginsOptions(config, rootDir)\n\n  const currentAPIs = getAPI({\n    browser: browserAPIs,\n    node: nodeAPIs,\n    ssr: ssrAPIs,\n  })\n\n  // Collate internal plugins, site config plugins, site default plugins\n  const pluginInfos = loadPluginsInternal(config, rootDir)\n\n  // Create a flattened array of the plugins\n  const pluginArray = flattenPlugins(pluginInfos)\n\n  // Work out which plugins use which APIs, including those which are not\n  // valid Gatsby APIs, aka 'badExports'\n  const x = collatePluginAPIs({ currentAPIs, flattenedPlugins: pluginArray })\n\n  // From this point on, these are fully-resolved plugins.\n  let flattenedPlugins = x.flattenedPlugins\n  const badExports = x.badExports\n\n  // Show errors for any non-Gatsby APIs exported from plugins\n  await handleBadExports({ currentAPIs, badExports })\n\n  // Show errors when ReplaceRenderer has been implemented multiple times\n  flattenedPlugins = handleMultipleReplaceRenderers({\n    flattenedPlugins,\n  })\n\n  // If we get this far, everything looks good. Update the store\n  store.dispatch({\n    type: `SET_SITE_FLATTENED_PLUGINS`,\n    payload: flattenedPlugins as IGatsbyState[\"flattenedPlugins\"],\n  })\n\n  return flattenedPlugins\n}\n"],"file":"index.js"}