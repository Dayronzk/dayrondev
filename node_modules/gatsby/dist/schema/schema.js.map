{"version":3,"sources":["../../src/schema/schema.js"],"names":["_","require","invariant","isSpecifiedScalarType","isIntrospectionType","assertValidName","GraphQLNonNull","GraphQLList","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","ObjectTypeComposer","InterfaceTypeComposer","UnionTypeComposer","InputTypeComposer","ScalarTypeComposer","EnumTypeComposer","getDataStore","getNode","getNodesByType","apiRunner","report","addNodeInterfaceFields","overridableBuiltInTypeNames","addInferredType","addInferredTypes","findOne","findManyPaginated","wrappingResolver","defaultResolver","processFieldExtensions","internalExtensionNames","isASTDocument","parseTypeDef","reportParsingError","printTypeDefinitions","buildSchema","schemaComposer","types","typeMapping","fieldExtensions","thirdPartySchemas","printConfig","enginePrintConfig","typeConflictReporter","inferenceMetadata","freeze","parentSpan","ready","updateSchemaComposer","schema","freezeTypeComposers","rebuildSchemaWithSitePage","typeComposer","getOTC","shouldInfer","hasExtension","getExtension","processTypeComposer","module","exports","excluded","Set","Array","from","values","forEach","tc","isCompositeTC","has","getTypeName","type","getType","activity","phantomActivity","start","addTypes","span","end","addInferredChildOfExtensions","process","env","GATSBY_SKIP_WRITING_SCHEMA_TO_FILE","config","addSetFieldsOnGraphQLNodeTypeFields","addConvenienceChildrenFields","Promise","all","map","checkQueryableInterfaces","addThirdPartySchemas","addCustomResolveFunctions","attachTracingResolver","hasInterface","determineSearchableFields","addTypeToRootQuery","isNodeInterface","fieldNames","query","typeName","camelCase","queryAll","convenienceChild","convenienceChildren","typeOrTypeDef","plugin","parsedTypes","createdFrom","parseTypes","doc","error","processAddedType","createTypeComposerFromGatsbyType","checkIsAllowedTypeName","get","mergeTypes","name","typeOwner","isOverridableBuiltInType","isSafeMerge","warn","mergeFields","fields","getFields","getInterfaces","iface","addInterface","mergeResolveType","isNamedTypeComposer","extendExtensions","getExtensions","addExtensions","add","getResolveType","setResolveType","node","internal","addSchemaMustHaveType","setExtension","directives","getDirectives","args","hasCorrectIdField","hasField","getFieldType","toString","panic","getFieldNames","fieldName","setFieldExtension","getFieldDirectives","getFieldExtensions","Object","keys","filter","includes","definition","getDirective","defaultValue","undefined","arg","argumentDef","find","value","validate","message","endsWith","kind","GatsbyGraphQLTypeKind","OBJECT","createTemp","typeMapper","convertOutputFieldConfigMap","interfaces","tmpComposer","createInterfaceTC","getIFTC","INPUT_OBJECT","convertInputFieldConfigMap","UNION","createObjectTC","INTERFACE","ENUM","SCALAR","JSON","stringify","result","nodes","traceId","addNestedFields","schemaQueryType","getQueryType","queryTC","createTempTC","processThirdPartyTypeFields","Query","addFields","getTypeMap","typeHasFields","_fields","createTC","resetOverriddenThirdPartyTypeFields","getFieldExtension","removeField","fieldType","String","replace","extendField","intermediateSchema","createResolvers","resolvers","ignoreNonexistentTypes","fieldConfig","originalFieldConfig","getFieldConfig","originalTypeName","originalResolver","resolve","fieldTypeName","isArray","stringifyArray","newConfig","source","context","info","defaultFieldResolver","extendFieldExtensions","needsResolve","field","getField","extensions","dateformat","searchable","SEARCHABLE_ENUM","SEARCHABLE","sortable","SORTABLE_ENUM","SORTABLE","proxy","isEmpty","DEPRECATED_SEARCHABLE","DEPRECATED_SORTABLE","parentTypesToChildren","Map","mimeTypesToChildren","typesHandlingMimeTypes","mimeType","set","mimeTypes","parentType","children","parent","getAnyTC","child","createChildrenField","createChildField","parentTypes","isExplicitChild","childTypeComposer","childOfExtension","parentMimeTypes","some","addInferredChildOfExtension","parentTypeName","childNodeTypes","iterateNodesByType","childNode","push","description","path","nodeModel","getNodesByIds","ids","length","sortInputTC","filterInputTC","paginationTC","queryName","queryNamePlural","sort","skip","limit","makeFieldNonNull","definitions","def","parsedType","makeSchemaDef","_gqType","delete","arr","item","Error","ofType","v","parseValue","interfaceTypeComposer","queryableInterfaces","incorrectTypes","size","t","join","entries","setField","resolveType"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst {\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  assertValidName,\n  GraphQLNonNull,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n} = require(`graphql`)\nconst {\n  ObjectTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  InputTypeComposer,\n  ScalarTypeComposer,\n  EnumTypeComposer,\n} = require(`graphql-compose`)\nconst { getDataStore, getNode, getNodesByType } = require(`../datastore`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { addNodeInterfaceFields } = require(`./types/node-interface`)\nconst { overridableBuiltInTypeNames } = require(`./types/built-in-types`)\nconst { addInferredType, addInferredTypes } = require(`./infer`)\nconst {\n  findOne,\n  findManyPaginated,\n  wrappingResolver,\n  defaultResolver,\n} = require(`./resolvers`)\nconst {\n  processFieldExtensions,\n  internalExtensionNames,\n} = require(`./extensions`)\nimport { getPagination } from \"./types/pagination\"\nimport { getSortInput, SORTABLE_ENUM } from \"./types/sort\"\nimport { getFilterInput, SEARCHABLE_ENUM } from \"./types/filter\"\nimport { isGatsbyType, GatsbyGraphQLTypeKind } from \"./types/type-builders\"\n\nconst {\n  isASTDocument,\n  parseTypeDef,\n  reportParsingError,\n} = require(`./types/type-defs`)\nimport {\n  clearDerivedTypes,\n  deleteFieldsOfDerivedTypes,\n} from \"./types/derived-types\"\nconst { printTypeDefinitions } = require(`./print`)\n\nconst buildSchema = async ({\n  schemaComposer,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  printConfig,\n  enginePrintConfig,\n  typeConflictReporter,\n  inferenceMetadata,\n  freeze = false,\n  parentSpan,\n}) => {\n  // FIXME: consider removing .ready here - it is needed for various tests to pass (although probably harmless)\n  await getDataStore().ready()\n  await updateSchemaComposer({\n    schemaComposer,\n    types,\n    typeMapping,\n    fieldExtensions,\n    thirdPartySchemas,\n    printConfig,\n    enginePrintConfig,\n    typeConflictReporter,\n    inferenceMetadata,\n    parentSpan,\n  })\n  // const { printSchema } = require(`graphql`)\n  const schema = schemaComposer.buildSchema()\n\n  if (freeze) {\n    freezeTypeComposers(schemaComposer)\n  }\n\n  // console.log(printSchema(schema))\n  return schema\n}\n\nconst rebuildSchemaWithSitePage = async ({\n  schemaComposer,\n  typeMapping,\n  fieldExtensions,\n  typeConflictReporter,\n  inferenceMetadata,\n  parentSpan,\n}) => {\n  const typeComposer = schemaComposer.getOTC(`SitePage`)\n\n  // Clear derived types and fields\n  // they will be re-created in processTypeComposer later\n  deleteFieldsOfDerivedTypes({ typeComposer })\n  clearDerivedTypes({ schemaComposer, typeComposer })\n\n  const shouldInfer =\n    !typeComposer.hasExtension(`infer`) ||\n    typeComposer.getExtension(`infer`) !== false\n  if (shouldInfer) {\n    addInferredType({\n      schemaComposer,\n      typeComposer,\n      typeConflictReporter,\n      typeMapping,\n      inferenceMetadata,\n      parentSpan,\n    })\n  }\n  await processTypeComposer({\n    schemaComposer,\n    typeComposer,\n    fieldExtensions,\n    parentSpan,\n  })\n  const schema = schemaComposer.buildSchema()\n\n  freezeTypeComposers(schemaComposer)\n\n  return schema\n}\n\nmodule.exports = {\n  buildSchema,\n  rebuildSchemaWithSitePage,\n}\n\n// Workaround for https://github.com/graphql-compose/graphql-compose/issues/319\n//  FIXME: remove this when fixed in graphql-compose\nconst freezeTypeComposers = (schemaComposer, excluded = new Set()) => {\n  Array.from(schemaComposer.values()).forEach(tc => {\n    const isCompositeTC =\n      tc instanceof ObjectTypeComposer || tc instanceof InterfaceTypeComposer\n\n    if (isCompositeTC && !excluded.has(tc.getTypeName())) {\n      // typeComposer.getType() actually mutates the underlying GraphQL type\n      //   and always re-assigns type._fields with a thunk.\n      //   It causes continuous redundant field re-definitions when running queries\n      //   (affects performance significantly).\n      //   Prevent the mutation and \"freeze\" the type:\n      const type = tc.getType()\n      tc.getType = () => type\n    }\n  })\n}\n\nconst updateSchemaComposer = async ({\n  schemaComposer,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  printConfig,\n  enginePrintConfig,\n  typeConflictReporter,\n  inferenceMetadata,\n  parentSpan,\n}) => {\n  let activity = report.phantomActivity(`Add explicit types`, {\n    parentSpan: parentSpan,\n  })\n  activity.start()\n  await addTypes({ schemaComposer, parentSpan: activity.span, types })\n  activity.end()\n\n  activity = report.phantomActivity(`Add inferred types`, {\n    parentSpan: parentSpan,\n  })\n  activity.start()\n  await addInferredTypes({\n    schemaComposer,\n    typeConflictReporter,\n    typeMapping,\n    inferenceMetadata,\n    parentSpan: activity.span,\n  })\n  addInferredChildOfExtensions({\n    schemaComposer,\n  })\n  activity.end()\n\n  activity = report.phantomActivity(`Processing types`, {\n    parentSpan: parentSpan,\n  })\n  activity.start()\n  if (!process.env.GATSBY_SKIP_WRITING_SCHEMA_TO_FILE) {\n    await printTypeDefinitions({\n      config: printConfig,\n      schemaComposer,\n      parentSpan: activity.span,\n    })\n    if (enginePrintConfig) {\n      // make sure to print schema that will be used when bundling graphql-engine\n      await printTypeDefinitions({\n        config: enginePrintConfig,\n        schemaComposer,\n        parentSpan: activity.span,\n      })\n    }\n  }\n  await addSetFieldsOnGraphQLNodeTypeFields({\n    schemaComposer,\n    parentSpan: activity.span,\n  })\n  await addConvenienceChildrenFields({\n    schemaComposer,\n    parentSpan: activity.span,\n  })\n  await Promise.all(\n    Array.from(new Set(schemaComposer.values())).map(typeComposer =>\n      processTypeComposer({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        parentSpan: activity.span,\n      })\n    )\n  )\n  checkQueryableInterfaces({ schemaComposer, parentSpan: activity.span })\n  await addThirdPartySchemas({\n    schemaComposer,\n    thirdPartySchemas,\n    parentSpan: activity.span,\n  })\n  await addCustomResolveFunctions({ schemaComposer, parentSpan: activity.span })\n  attachTracingResolver({ schemaComposer, parentSpan: activity.span })\n  activity.end()\n}\n\nconst processTypeComposer = async ({\n  schemaComposer,\n  typeComposer,\n  fieldExtensions,\n  parentSpan,\n}) => {\n  if (typeComposer instanceof ObjectTypeComposer) {\n    await processFieldExtensions({\n      schemaComposer,\n      typeComposer,\n      fieldExtensions,\n      parentSpan,\n    })\n\n    if (typeComposer.hasInterface(`Node`)) {\n      await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n    }\n    await determineSearchableFields({\n      schemaComposer,\n      typeComposer,\n      parentSpan,\n    })\n\n    if (typeComposer.hasInterface(`Node`)) {\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  } else if (typeComposer instanceof InterfaceTypeComposer) {\n    if (isNodeInterface(typeComposer)) {\n      await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n\n      // We only process field extensions for queryable Node interfaces, so we get\n      // the input args on the root query type, e.g. `formatString` etc. for `dateformat`\n      await processFieldExtensions({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        parentSpan,\n      })\n      await determineSearchableFields({\n        schemaComposer,\n        typeComposer,\n        parentSpan,\n      })\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  }\n}\n\nconst fieldNames = {\n  query: typeName => _.camelCase(typeName),\n  queryAll: typeName => _.camelCase(`all ${typeName}`),\n  convenienceChild: typeName => _.camelCase(`child ${typeName}`),\n  convenienceChildren: typeName => _.camelCase(`children ${typeName}`),\n}\n\nconst addTypes = ({ schemaComposer, types, parentSpan }) => {\n  types.forEach(({ typeOrTypeDef, plugin }) => {\n    if (typeof typeOrTypeDef === `string`) {\n      typeOrTypeDef = parseTypeDef(typeOrTypeDef)\n    }\n    if (isASTDocument(typeOrTypeDef)) {\n      let parsedTypes\n      const createdFrom = `sdl`\n      try {\n        parsedTypes = parseTypes({\n          doc: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          schemaComposer,\n          parentSpan,\n        })\n      } catch (error) {\n        reportParsingError(error)\n        return\n      }\n      parsedTypes.forEach(type => {\n        processAddedType({\n          schemaComposer,\n          type,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      })\n    } else if (isGatsbyType(typeOrTypeDef)) {\n      const type = createTypeComposerFromGatsbyType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        parentSpan,\n      })\n\n      if (type) {\n        const typeName = type.getTypeName()\n        const createdFrom = `typeBuilder`\n        checkIsAllowedTypeName(typeName)\n        if (schemaComposer.has(typeName)) {\n          const typeComposer = schemaComposer.get(typeName)\n          mergeTypes({\n            schemaComposer,\n            typeComposer,\n            type,\n            plugin,\n            createdFrom,\n            parentSpan,\n          })\n        } else {\n          processAddedType({\n            schemaComposer,\n            type,\n            parentSpan,\n            createdFrom,\n            plugin,\n          })\n        }\n      }\n    } else {\n      const typeName = typeOrTypeDef.name\n      const createdFrom = `graphql-js`\n      checkIsAllowedTypeName(typeName)\n      if (schemaComposer.has(typeName)) {\n        const typeComposer = schemaComposer.get(typeName)\n        mergeTypes({\n          schemaComposer,\n          typeComposer,\n          type: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          parentSpan,\n        })\n      } else {\n        processAddedType({\n          schemaComposer,\n          type: typeOrTypeDef,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      }\n    }\n  })\n}\n\nconst mergeTypes = ({\n  schemaComposer,\n  typeComposer,\n  type,\n  plugin,\n  createdFrom,\n  parentSpan,\n}) => {\n  // The merge is considered safe when a user or a plugin owning the type extend this type\n  // TODO: add proper conflicts detection and reporting (on the field level)\n  const typeOwner = typeComposer.getExtension(`plugin`)\n  const isOverridableBuiltInType =\n    !typeOwner && overridableBuiltInTypeNames.has(typeComposer.getTypeName())\n\n  const isSafeMerge =\n    !plugin ||\n    plugin.name === `default-site-plugin` ||\n    plugin.name === typeOwner ||\n    typeComposer.hasExtension(`isPlaceholder`) ||\n    isOverridableBuiltInType\n\n  if (!isSafeMerge) {\n    if (typeOwner) {\n      report.warn(\n        `Plugin \\`${plugin.name}\\` has customized the GraphQL type ` +\n          `\\`${typeComposer.getTypeName()}\\`, which has already been defined ` +\n          `by the plugin \\`${typeOwner}\\`. ` +\n          `This could potentially cause conflicts.`\n      )\n    } else {\n      report.warn(\n        `Plugin \\`${plugin.name}\\` has customized the built-in Gatsby GraphQL type ` +\n          `\\`${typeComposer.getTypeName()}\\`. ` +\n          `This is allowed, but could potentially cause conflicts.`\n      )\n    }\n  }\n\n  if (\n    type instanceof ObjectTypeComposer ||\n    type instanceof InterfaceTypeComposer ||\n    type instanceof GraphQLObjectType ||\n    type instanceof GraphQLInterfaceType\n  ) {\n    mergeFields({ typeComposer, fields: type.getFields() })\n    type.getInterfaces().forEach(iface => typeComposer.addInterface(iface))\n  }\n\n  if (\n    type instanceof GraphQLInterfaceType ||\n    type instanceof InterfaceTypeComposer ||\n    type instanceof GraphQLUnionType ||\n    type instanceof UnionTypeComposer\n  ) {\n    mergeResolveType({ typeComposer, type })\n  }\n\n  if (isNamedTypeComposer(type)) {\n    typeComposer.extendExtensions(type.getExtensions())\n  }\n\n  addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n\n  return true\n}\n\nconst processAddedType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n  createdFrom,\n  plugin,\n}) => {\n  const typeName = schemaComposer.add(type)\n  const typeComposer = schemaComposer.get(typeName)\n  if (\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof UnionTypeComposer\n  ) {\n    if (!typeComposer.getResolveType()) {\n      typeComposer.setResolveType(node => node.internal.type)\n    }\n  }\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n\n  addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n\n  return typeComposer\n}\n\nconst addExtensions = ({\n  schemaComposer,\n  typeComposer,\n  plugin,\n  createdFrom,\n}) => {\n  typeComposer.setExtension(`createdFrom`, createdFrom)\n  typeComposer.setExtension(`plugin`, plugin ? plugin.name : null)\n\n  if (createdFrom === `sdl`) {\n    const directives = typeComposer.getDirectives()\n    directives.forEach(({ name, args }) => {\n      switch (name) {\n        case `infer`:\n        case `dontInfer`: {\n          typeComposer.setExtension(`infer`, name === `infer`)\n          break\n        }\n        case `mimeTypes`:\n          typeComposer.setExtension(`mimeTypes`, args)\n          break\n        case `childOf`:\n          typeComposer.setExtension(`childOf`, args)\n          break\n        case `nodeInterface`:\n          if (typeComposer instanceof InterfaceTypeComposer) {\n            typeComposer.setExtension(`nodeInterface`, true)\n          }\n          break\n        default:\n      }\n    })\n  }\n\n  if (\n    typeComposer instanceof InterfaceTypeComposer &&\n    isNodeInterface(typeComposer)\n  ) {\n    // TODO: remove nodeInterface in Gatsby v4\n    if (typeComposer.hasExtension(`nodeInterface`)) {\n      report.warn(\n        `Deprecation warning: ` +\n          `\\`@nodeInterface\\` extension is deprecated and will be removed in Gatsby v4. ` +\n          `Use interface inheritance instead.\\n` +\n          `To upgrade replace the old format:\\n` +\n          `  interface \\`${typeComposer.getTypeName()}\\` @nodeInterface\\n` +\n          `with the new one (in \\`createTypes\\` action of schema customization API):\\n` +\n          `  interface \\`${typeComposer.getTypeName()}\\` implements Node\\n` +\n          `Read more about schema customization here:\\n` +\n          `https://www.gatsbyjs.com/docs/reference/graphql-data-layer/schema-customization/`\n      )\n    }\n\n    const hasCorrectIdField =\n      typeComposer.hasField(`id`) &&\n      typeComposer.getFieldType(`id`).toString() === `ID!`\n\n    if (!hasCorrectIdField) {\n      report.panic(\n        `Interfaces with the \\`nodeInterface\\` extension must have a field ` +\n          `\\`id\\` of type \\`ID!\\`. Check the type definition of ` +\n          `\\`${typeComposer.getTypeName()}\\`.`\n      )\n    }\n  }\n\n  if (\n    typeComposer instanceof ObjectTypeComposer ||\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof InputTypeComposer\n  ) {\n    typeComposer.getFieldNames().forEach(fieldName => {\n      typeComposer.setFieldExtension(fieldName, `createdFrom`, createdFrom)\n      typeComposer.setFieldExtension(\n        fieldName,\n        `plugin`,\n        plugin ? plugin.name : null\n      )\n\n      if (createdFrom === `sdl`) {\n        const directives = typeComposer.getFieldDirectives(fieldName)\n        directives.forEach(({ name, args }) => {\n          typeComposer.setFieldExtension(fieldName, name, args)\n        })\n      }\n\n      // Validate field extension args. `graphql-compose` already checks the\n      // type of directive args in `parseDirectives`, but we want to check\n      // extensions provided with type builders as well. Also, we warn if an\n      // extension option was provided which does not exist in the field\n      // extension definition.\n      const fieldExtensions = typeComposer.getFieldExtensions(fieldName)\n      const typeName = typeComposer.getTypeName()\n      Object.keys(fieldExtensions)\n        .filter(name => !internalExtensionNames.includes(name))\n        .forEach(name => {\n          const args = fieldExtensions[name]\n\n          if (!args || typeof args !== `object`) {\n            report.error(\n              `Field extension arguments must be provided as an object. ` +\n                `Received \"${args}\" on \\`${typeName}.${fieldName}\\`.`\n            )\n            return\n          }\n\n          try {\n            const definition = schemaComposer.getDirective(name)\n\n            // Handle `defaultValue` when not provided as directive\n            definition.args.forEach(({ name, defaultValue }) => {\n              if (args[name] === undefined && defaultValue !== undefined) {\n                args[name] = defaultValue\n              }\n            })\n\n            Object.keys(args).forEach(arg => {\n              const argumentDef = definition.args.find(\n                ({ name }) => name === arg\n              )\n              if (!argumentDef) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has invalid argument \\`${arg}\\`.`\n                )\n                return\n              }\n              const value = args[arg]\n              try {\n                validate(argumentDef.type, value)\n              } catch (error) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has argument \\`${arg}\\` with invalid value \"${value}\". ` +\n                    error.message\n                )\n              }\n            })\n          } catch (error) {\n            report.error(\n              `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                `is not available.`\n            )\n          }\n        })\n    })\n  }\n\n  return typeComposer\n}\n\nconst checkIsAllowedTypeName = name => {\n  invariant(\n    name !== `Node`,\n    `The GraphQL type \\`Node\\` is reserved for internal use.`\n  )\n  invariant(\n    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),\n    `GraphQL type names ending with \"FilterInput\" or \"SortInput\" are ` +\n      `reserved for internal use. Please rename \\`${name}\\`.`\n  )\n  invariant(\n    ![`Boolean`, `Date`, `Float`, `ID`, `Int`, `JSON`, `String`].includes(name),\n    `The GraphQL type \\`${name}\\` is reserved for internal use by ` +\n      `built-in scalar types.`\n  )\n  assertValidName(name)\n}\n\nconst createTypeComposerFromGatsbyType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n}) => {\n  let typeComposer\n  switch (type.kind) {\n    case GatsbyGraphQLTypeKind.OBJECT: {\n      typeComposer = ObjectTypeComposer.createTemp({\n        ...type.config,\n        fields: () =>\n          schemaComposer.typeMapper.convertOutputFieldConfigMap(\n            type.config.fields\n          ),\n        interfaces: () => {\n          if (type.config.interfaces) {\n            return type.config.interfaces.map(iface => {\n              if (typeof iface === `string`) {\n                // Sadly, graphql-compose runs this function too early - before we have\n                // all of those interfaces actually created in the schema, so have to create\n                // a temporary placeholder composer :/\n                if (!schemaComposer.has(iface)) {\n                  const tmpComposer = schemaComposer.createInterfaceTC(iface)\n                  tmpComposer.setExtension(`isPlaceholder`, true)\n                  return tmpComposer\n                }\n                return schemaComposer.getIFTC(iface)\n              } else {\n                return iface\n              }\n            })\n          } else {\n            return []\n          }\n        },\n      })\n      break\n    }\n    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {\n      typeComposer = InputTypeComposer.createTemp({\n        ...type.config,\n        fields: schemaComposer.typeMapper.convertInputFieldConfigMap(\n          type.config.fields\n        ),\n      })\n      break\n    }\n    case GatsbyGraphQLTypeKind.UNION: {\n      typeComposer = UnionTypeComposer.createTemp({\n        ...type.config,\n        types: () => {\n          if (type.config.types) {\n            return type.config.types.map(typeName => {\n              if (!schemaComposer.has(typeName)) {\n                // Sadly, graphql-compose runs this function too early - before we have\n                // all of those types actually created in the schema, so have to create\n                // a temporary placeholder composer :/\n                const tmpComposer = schemaComposer.createObjectTC(typeName)\n                tmpComposer.setExtension(`isPlaceholder`, true)\n                return tmpComposer\n              }\n              return schemaComposer.getOTC(typeName)\n            })\n          } else {\n            return []\n          }\n        },\n      })\n      break\n    }\n    case GatsbyGraphQLTypeKind.INTERFACE: {\n      typeComposer = InterfaceTypeComposer.createTemp({\n        ...type.config,\n        fields: () =>\n          schemaComposer.typeMapper.convertOutputFieldConfigMap(\n            type.config.fields\n          ),\n        interfaces: () => {\n          if (type.config.interfaces) {\n            return type.config.interfaces.map(iface => {\n              if (typeof iface === `string`) {\n                // Sadly, graphql-compose runs this function too early - before we have\n                // all of those interfaces actually created in the schema, so have to create\n                // a temporary placeholder composer :/\n                if (!schemaComposer.has(iface)) {\n                  const tmpComposer = schemaComposer.createInterfaceTC(iface)\n                  tmpComposer.setExtension(`isPlaceholder`, true)\n                  return tmpComposer\n                }\n                return schemaComposer.getIFTC(iface)\n              } else {\n                return iface\n              }\n            })\n          } else {\n            return []\n          }\n        },\n      })\n      break\n    }\n    case GatsbyGraphQLTypeKind.ENUM: {\n      typeComposer = EnumTypeComposer.createTemp(type.config)\n      break\n    }\n    case GatsbyGraphQLTypeKind.SCALAR: {\n      typeComposer = ScalarTypeComposer.createTemp(type.config)\n      break\n    }\n    default: {\n      report.warn(`Illegal type definition: ${JSON.stringify(type.config)}`)\n      typeComposer = null\n    }\n  }\n  if (typeComposer) {\n    // Workaround for https://github.com/graphql-compose/graphql-compose/issues/311\n    typeComposer.schemaComposer = schemaComposer\n  }\n  return typeComposer\n}\n\nconst addSetFieldsOnGraphQLNodeTypeFields = ({ schemaComposer, parentSpan }) =>\n  Promise.all(\n    Array.from(schemaComposer.values()).map(async tc => {\n      if (tc instanceof ObjectTypeComposer && tc.hasInterface(`Node`)) {\n        const typeName = tc.getTypeName()\n        const result = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n          type: {\n            name: typeName,\n            get nodes() {\n              // TODO STRICT_MODE: return iterator instead of array\n              return getNodesByType(typeName)\n            },\n          },\n          traceId: `initial-setFieldsOnGraphQLNodeType`,\n          parentSpan,\n        })\n        if (result) {\n          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting\n          // nested fields with a path as property name, i.e.\n          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form\n          // `{ frontmatter: { published: 'Boolean' }}`\n          result.forEach(fields => tc.addNestedFields(fields))\n        }\n      }\n    })\n  )\n\nconst addThirdPartySchemas = ({\n  schemaComposer,\n  thirdPartySchemas,\n  parentSpan,\n}) => {\n  thirdPartySchemas.forEach(schema => {\n    const schemaQueryType = schema.getQueryType()\n    const queryTC = schemaComposer.createTempTC(schemaQueryType)\n    processThirdPartyTypeFields({\n      typeComposer: queryTC,\n      type: schemaQueryType,\n      schemaQueryType,\n    })\n    schemaComposer.Query.addFields(queryTC.getFields())\n\n    // Explicitly add the third-party schema's types, so they can be targeted\n    // in `createResolvers` API.\n    const types = schema.getTypeMap()\n    Object.keys(types).forEach(typeName => {\n      const type = types[typeName]\n      if (\n        type !== schemaQueryType &&\n        !isSpecifiedScalarType(type) &&\n        !isIntrospectionType(type) &&\n        type.name !== `Date` &&\n        type.name !== `JSON`\n      ) {\n        const typeHasFields =\n          type instanceof GraphQLObjectType ||\n          type instanceof GraphQLInterfaceType\n\n        // Workaround for an edge case typical for Relay Classic-compatible schemas.\n        // For example, GitHub API contains this piece:\n        //   type Query { relay: Query }\n        // And gatsby-source-graphql transforms it to:\n        //   type Query { github: GitHub }\n        //   type GitHub { relay: Query }\n        // The problem:\n        //   schemaComposer.createTC(type) for type `GitHub` will eagerly create type composers\n        //   for all fields (including `relay` and it's type: `Query` of the third-party schema)\n        //   This unexpected `Query` composer messes up with our own Query type composer and produces duplicate types.\n        //   The workaround is to make sure fields of the GitHub type are lazy and are evaluated only when\n        //   this Query type is already replaced with our own root `Query` type (see processThirdPartyTypeFields):\n        if (typeHasFields && typeof type._fields === `object`) {\n          const fields = type._fields\n          type._fields = () => fields\n        }\n        // ^^^ workaround done\n        const typeComposer = schemaComposer.createTC(type)\n        if (typeHasFields) {\n          processThirdPartyTypeFields({\n            typeComposer,\n            type,\n            schemaQueryType,\n          })\n        }\n        typeComposer.setExtension(`createdFrom`, `thirdPartySchema`)\n        schemaComposer.addSchemaMustHaveType(typeComposer)\n      }\n    })\n  })\n}\n\nconst resetOverriddenThirdPartyTypeFields = ({ typeComposer }) => {\n  // The problem: createResolvers API mutates third party schema instance.\n  //   For example it can add a new field referencing a type from our main schema\n  //   Then if we rebuild the schema this old type instance will sneak into\n  //   the new schema and produce the famous error:\n  //   \"Schema must contain uniquely named types but contains multiple types named X\"\n  // This function only affects schema rebuilding pathway.\n  //   It cleans up artifacts created by the `createResolvers` API of the previous build\n  //   so that we return the third party schema to its initial state (hence can safely re-add)\n  // TODO: the right way to fix this would be not to mutate the third party schema in\n  //   the first place. But unfortunately mutation happens in the `graphql-compose`\n  //   and we don't have an easy way to avoid it without major rework\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const createdFrom = typeComposer.getFieldExtension(fieldName, `createdFrom`)\n    if (createdFrom === `createResolvers`) {\n      typeComposer.removeField(fieldName)\n      return\n    }\n    const config = typeComposer.getFieldExtension(\n      fieldName,\n      `originalFieldConfig`\n    )\n    if (config) {\n      typeComposer.removeField(fieldName)\n      typeComposer.addFields({\n        [fieldName]: config,\n      })\n    }\n  })\n}\n\nconst processThirdPartyTypeFields = ({\n  typeComposer,\n  type,\n  schemaQueryType,\n}) => {\n  // Fix for types that refer to Query. Thanks Relay Classic!\n  const fields = type.getFields()\n  Object.keys(fields).forEach(fieldName => {\n    // Remove customization that we could have added via `createResolvers`\n    // to make it work with schema rebuilding\n    const fieldType = String(fields[fieldName].type)\n    if (fieldType.replace(/[[\\]!]/g, ``) === schemaQueryType.name) {\n      typeComposer.extendField(fieldName, {\n        type: fieldType.replace(schemaQueryType.name, `Query`),\n      })\n    }\n  })\n  resetOverriddenThirdPartyTypeFields({ typeComposer })\n}\n\nconst addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {\n  const intermediateSchema = schemaComposer.buildSchema()\n  const createResolvers = (\n    resolvers,\n    { ignoreNonexistentTypes = false } = {}\n  ) => {\n    Object.keys(resolvers).forEach(typeName => {\n      const fields = resolvers[typeName]\n      if (schemaComposer.has(typeName)) {\n        const tc = schemaComposer.getOTC(typeName)\n        Object.keys(fields).forEach(fieldName => {\n          const fieldConfig = fields[fieldName]\n          if (tc.hasField(fieldName)) {\n            const originalFieldConfig = tc.getFieldConfig(fieldName)\n            const originalTypeName = originalFieldConfig.type.toString()\n            const originalResolver = originalFieldConfig.resolve\n            let fieldTypeName\n            if (fieldConfig.type) {\n              fieldTypeName = Array.isArray(fieldConfig.type)\n                ? stringifyArray(fieldConfig.type)\n                : fieldConfig.type.toString()\n            }\n\n            if (\n              !fieldTypeName ||\n              fieldTypeName.replace(/!/g, ``) ===\n                originalTypeName.replace(/!/g, ``) ||\n              tc.getExtension(`createdFrom`) === `thirdPartySchema`\n            ) {\n              const newConfig = {}\n              if (fieldConfig.type) {\n                newConfig.type = fieldConfig.type\n              }\n              if (fieldConfig.args) {\n                newConfig.args = fieldConfig.args\n              }\n              if (fieldConfig.resolve) {\n                newConfig.resolve = (source, args, context, info) =>\n                  fieldConfig.resolve(source, args, context, {\n                    ...info,\n                    originalResolver:\n                      originalResolver || context.defaultFieldResolver,\n                  })\n                tc.extendFieldExtensions(fieldName, {\n                  needsResolve: true,\n                })\n              }\n              tc.extendField(fieldName, newConfig)\n\n              // See resetOverriddenThirdPartyTypeFields for explanation\n              if (tc.getExtension(`createdFrom`) === `thirdPartySchema`) {\n                tc.setFieldExtension(\n                  fieldName,\n                  `originalFieldConfig`,\n                  originalFieldConfig\n                )\n              }\n            } else if (fieldTypeName) {\n              report.warn(\n                `\\`createResolvers\\` passed resolvers for field ` +\n                  `\\`${typeName}.${fieldName}\\` with type \\`${fieldTypeName}\\`. ` +\n                  `Such a field with type \\`${originalTypeName}\\` already exists ` +\n                  `on the type. Use \\`createTypes\\` to override type fields.`\n              )\n            }\n          } else {\n            tc.addFields({\n              [fieldName]: fieldConfig,\n            })\n            // See resetOverriddenThirdPartyTypeFields for explanation\n            tc.setFieldExtension(fieldName, `createdFrom`, `createResolvers`)\n          }\n        })\n      } else if (!ignoreNonexistentTypes) {\n        report.warn(\n          `\\`createResolvers\\` passed resolvers for type \\`${typeName}\\` that ` +\n            `doesn't exist in the schema. Use \\`createTypes\\` to add the type ` +\n            `before adding resolvers.`\n        )\n      }\n    })\n  }\n  await apiRunner(`createResolvers`, {\n    intermediateSchema,\n    createResolvers,\n    traceId: `initial-createResolvers`,\n    parentSpan,\n  })\n}\n\nfunction attachTracingResolver({ schemaComposer }) {\n  schemaComposer.forEach(typeComposer => {\n    if (\n      typeComposer instanceof ObjectTypeComposer ||\n      typeComposer instanceof InterfaceTypeComposer\n    ) {\n      typeComposer.getFieldNames().forEach(fieldName => {\n        const field = typeComposer.getField(fieldName)\n        typeComposer.extendField(fieldName, {\n          resolve:\n            field.resolve && field.resolve !== defaultResolver\n              ? wrappingResolver(field.resolve)\n              : defaultResolver,\n        })\n      })\n    }\n  })\n}\n\nconst determineSearchableFields = ({ schemaComposer, typeComposer }) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const field = typeComposer.getField(fieldName)\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    if (field.resolve) {\n      if (extensions.dateformat) {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: extensions.proxy ? true : false,\n        })\n      } else if (!_.isEmpty(field.args)) {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.DEPRECATED_SEARCHABLE,\n          sortable: SORTABLE_ENUM.DEPRECATED_SORTABLE,\n          needsResolve: true,\n        })\n      } else {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: true,\n        })\n      }\n    } else {\n      typeComposer.extendFieldExtensions(fieldName, {\n        searchable: SEARCHABLE_ENUM.SEARCHABLE,\n        sortable: SORTABLE_ENUM.SORTABLE,\n        needsResolve: false,\n      })\n    }\n  })\n}\n\nconst addConvenienceChildrenFields = ({ schemaComposer }) => {\n  const parentTypesToChildren = new Map()\n  const mimeTypesToChildren = new Map()\n  const typesHandlingMimeTypes = new Map()\n\n  schemaComposer.forEach(type => {\n    if (\n      (type instanceof ObjectTypeComposer ||\n        type instanceof InterfaceTypeComposer) &&\n      type.hasExtension(`mimeTypes`)\n    ) {\n      const { types } = type.getExtension(`mimeTypes`)\n      new Set(types).forEach(mimeType => {\n        if (!typesHandlingMimeTypes.has(mimeType)) {\n          typesHandlingMimeTypes.set(mimeType, new Set())\n        }\n        typesHandlingMimeTypes.get(mimeType).add(type)\n      })\n    }\n\n    if (\n      (type instanceof ObjectTypeComposer ||\n        type instanceof InterfaceTypeComposer) &&\n      type.hasExtension(`childOf`)\n    ) {\n      if (type instanceof ObjectTypeComposer && !type.hasInterface(`Node`)) {\n        report.error(\n          `The \\`childOf\\` extension can only be used on types that implement the \\`Node\\` interface.\\n` +\n            `Check the type definition of \\`${type.getTypeName()}\\`.`\n        )\n        return\n      }\n      if (type instanceof InterfaceTypeComposer && !isNodeInterface(type)) {\n        report.error(\n          `The \\`childOf\\` extension can only be used on interface types that ` +\n            `have the \\`@nodeInterface\\` extension.\\n` +\n            `Check the type definition of \\`${type.getTypeName()}\\`.`\n        )\n        return\n      }\n\n      const { types, mimeTypes } = type.getExtension(`childOf`)\n\n      new Set(types).forEach(parentType => {\n        if (!parentTypesToChildren.has(parentType)) {\n          parentTypesToChildren.set(parentType, new Set())\n        }\n        parentTypesToChildren.get(parentType).add(type)\n      })\n      new Set(mimeTypes).forEach(mimeType => {\n        if (!mimeTypesToChildren.has(mimeType)) {\n          mimeTypesToChildren.set(mimeType, new Set())\n        }\n        mimeTypesToChildren.get(mimeType).add(type)\n      })\n    }\n  })\n\n  parentTypesToChildren.forEach((children, parent) => {\n    if (!schemaComposer.has(parent)) return\n    const typeComposer = schemaComposer.getAnyTC(parent)\n    if (\n      typeComposer instanceof InterfaceTypeComposer &&\n      !isNodeInterface(typeComposer)\n    ) {\n      report.error(\n        `With the \\`childOf\\` extension, children fields can only be added to ` +\n          `interfaces which implement the \\`Node\\` interface.\\n` +\n          `Check the type definition of \\`${typeComposer.getTypeName()}\\`.`\n      )\n      return\n    }\n    children.forEach(child => {\n      typeComposer.addFields(createChildrenField(child.getTypeName()))\n      typeComposer.addFields(createChildField(child.getTypeName()))\n    })\n  })\n\n  mimeTypesToChildren.forEach((children, mimeType) => {\n    const parentTypes = typesHandlingMimeTypes.get(mimeType)\n    if (parentTypes) {\n      parentTypes.forEach(typeComposer => {\n        if (\n          typeComposer instanceof InterfaceTypeComposer &&\n          !isNodeInterface(typeComposer)\n        ) {\n          report.error(\n            `With the \\`childOf\\` extension, children fields can only be added to ` +\n              `interfaces which implement the \\`Node\\` interface.\\n` +\n              `Check the type definition of \\`${typeComposer.getTypeName()}\\`.`\n          )\n          return\n        }\n        children.forEach(child => {\n          typeComposer.addFields(createChildrenField(child.getTypeName()))\n          typeComposer.addFields(createChildField(child.getTypeName()))\n        })\n      })\n    }\n  })\n}\n\nconst isExplicitChild = ({ typeComposer, childTypeComposer }) => {\n  if (!childTypeComposer.hasExtension(`childOf`)) {\n    return false\n  }\n  const childOfExtension = childTypeComposer.getExtension(`childOf`)\n  const { types: parentMimeTypes = [] } =\n    typeComposer.getExtension(`mimeTypes`) ?? {}\n\n  return (\n    childOfExtension?.types?.includes(typeComposer.getTypeName()) ||\n    childOfExtension?.mimeTypes?.some(mimeType =>\n      parentMimeTypes.includes(mimeType)\n    )\n  )\n}\n\nconst addInferredChildOfExtensions = ({ schemaComposer }) => {\n  schemaComposer.forEach(typeComposer => {\n    if (\n      typeComposer instanceof ObjectTypeComposer &&\n      typeComposer.hasInterface(`Node`)\n    ) {\n      addInferredChildOfExtension({\n        schemaComposer,\n        typeComposer,\n      })\n    }\n  })\n}\n\nconst addInferredChildOfExtension = ({ schemaComposer, typeComposer }) => {\n  const shouldInfer = typeComposer.getExtension(`infer`)\n  // With `@dontInfer`, only parent-child\n  // relations explicitly set with the `@childOf` extension are added.\n  if (shouldInfer === false) return\n\n  const parentTypeName = typeComposer.getTypeName()\n\n  // This is expensive.\n  // TODO: We should probably collect this info during inference metadata pass\n  const childNodeTypes = new Set()\n  for (const node of getDataStore().iterateNodesByType(parentTypeName)) {\n    const children = (node.children || []).map(getNode)\n    for (const childNode of children) {\n      if (childNode?.internal?.type) {\n        childNodeTypes.add(childNode.internal.type)\n      }\n    }\n  }\n\n  childNodeTypes.forEach(typeName => {\n    const childTypeComposer = schemaComposer.getAnyTC(typeName)\n    let childOfExtension = childTypeComposer.getExtension(`childOf`)\n\n    if (isExplicitChild({ typeComposer, childTypeComposer })) {\n      return\n    }\n    // Set `@childOf` extension automatically\n    // This will cause convenience children fields like `childImageSharp`\n    // to be added in `addConvenienceChildrenFields` method.\n    // Also required for proper printing of the `@childOf` directive in the snapshot plugin\n    if (!childOfExtension) {\n      childOfExtension = {}\n    }\n    if (!childOfExtension.types) {\n      childOfExtension.types = []\n    }\n    childOfExtension.types.push(parentTypeName)\n    childTypeComposer.setExtension(`childOf`, childOfExtension)\n  })\n}\n\nconst createChildrenField = typeName => {\n  return {\n    [fieldNames.convenienceChildren(typeName)]: {\n      type: () => [typeName],\n      description: `Returns all children nodes filtered by type ${typeName}`,\n      resolve(source, args, context) {\n        const { path } = context\n        return context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n      },\n    },\n  }\n}\n\nconst createChildField = typeName => {\n  return {\n    [fieldNames.convenienceChild(typeName)]: {\n      type: () => typeName,\n      description:\n        `Returns the first child node of type ${typeName} ` +\n        `or null if there are no children of given type on this node`,\n      resolve(source, args, context) {\n        const { path } = context\n        const result = context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n        if (result && result.length > 0) {\n          return result[0]\n        } else {\n          return null\n        }\n      },\n    },\n  }\n}\n\nconst addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {\n  const sortInputTC = getSortInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const filterInputTC = getFilterInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const paginationTC = getPagination({\n    schemaComposer,\n    typeComposer,\n  })\n\n  const typeName = typeComposer.getTypeName()\n  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`\n  const queryName = fieldNames.query(typeName)\n  const queryNamePlural = fieldNames.queryAll(typeName)\n\n  schemaComposer.Query.addFields({\n    [queryName]: {\n      type: typeComposer,\n      args: {\n        ...filterInputTC.getFields(),\n      },\n      resolve: findOne(typeName),\n    },\n    [queryNamePlural]: {\n      type: paginationTC,\n      args: {\n        filter: filterInputTC,\n        sort: sortInputTC,\n        skip: `Int`,\n        limit: `Int`,\n      },\n      resolve: findManyPaginated(typeName),\n    },\n  }).makeFieldNonNull(queryNamePlural)\n}\n\nconst parseTypes = ({\n  doc,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const types = []\n  doc.definitions.forEach(def => {\n    const name = def.name.value\n    checkIsAllowedTypeName(name)\n\n    if (schemaComposer.has(name)) {\n      // We don't check if ast.kind matches composer type, but rely\n      // that this will throw when something is wrong and get\n      // reported by `reportParsingError`.\n\n      // Keep the original type composer around\n      const typeComposer = schemaComposer.get(name)\n\n      // After this, the parsed type composer will be registered as the composer\n      // handling the type name (requires cleanup after merging, see below)\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n\n      // Merge the parsed type with the original\n      mergeTypes({\n        schemaComposer,\n        typeComposer,\n        type: parsedType,\n        plugin,\n        createdFrom,\n        parentSpan,\n      })\n\n      // Cleanup:\n      // Set the original type composer (with the merged fields added)\n      // as the correct composer for the type name and remove the temporary one\n      // `graphql-compose` doesn't make that easy 🤯\n      // TODO: clean this up when this issue is fixed:\n      //  https://github.com/graphql-compose/graphql-compose/issues/311\n      schemaComposer.set(typeComposer.getTypeName(), typeComposer)\n      schemaComposer.set(typeComposer._gqType, typeComposer)\n      schemaComposer.delete(parsedType._gqType)\n      schemaComposer.delete(parsedType)\n    } else {\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n      types.push(parsedType)\n    }\n  })\n  return types\n}\n\nconst stringifyArray = arr =>\n  `[${arr.map(item =>\n    Array.isArray(item) ? stringifyArray(item) : item.toString()\n  )}]`\n\n// TODO: Import this directly from graphql-compose once we update to v7\nconst isNamedTypeComposer = type =>\n  type instanceof ObjectTypeComposer ||\n  type instanceof InputTypeComposer ||\n  type instanceof ScalarTypeComposer ||\n  type instanceof EnumTypeComposer ||\n  type instanceof InterfaceTypeComposer ||\n  type instanceof UnionTypeComposer\n\nconst validate = (type, value) => {\n  if (type instanceof GraphQLNonNull) {\n    if (value == null) {\n      throw new Error(`Expected non-null field value.`)\n    }\n    return validate(type.ofType, value)\n  } else if (type instanceof GraphQLList) {\n    if (!Array.isArray(value)) {\n      throw new Error(`Expected array field value.`)\n    }\n    return value.map(v => validate(type.ofType, v))\n  } else {\n    return type.parseValue(value)\n  }\n}\n\n// TODO: remove nodeInterface in Gatsby v4\nconst isNodeInterface = interfaceTypeComposer =>\n  interfaceTypeComposer.hasExtension(`nodeInterface`) ||\n  interfaceTypeComposer.hasInterface(`Node`)\n\nconst checkQueryableInterfaces = ({ schemaComposer }) => {\n  const queryableInterfaces = new Set()\n  schemaComposer.forEach(type => {\n    if (type instanceof InterfaceTypeComposer && isNodeInterface(type)) {\n      queryableInterfaces.add(type.getTypeName())\n    }\n  })\n  const incorrectTypes = new Set()\n  schemaComposer.forEach(type => {\n    if (type instanceof ObjectTypeComposer) {\n      const interfaces = type.getInterfaces()\n      if (\n        interfaces.some(iface =>\n          queryableInterfaces.has(iface.getTypeName())\n        ) &&\n        !type.hasInterface(`Node`)\n      ) {\n        incorrectTypes.add(type.getTypeName())\n      }\n    }\n  })\n  if (incorrectTypes.size) {\n    report.panic(\n      `Types implementing queryable interfaces must also implement the \\`Node\\` ` +\n        `interface. Check the type definition of ` +\n        `${Array.from(incorrectTypes)\n          .map(t => `\\`${t}\\``)\n          .join(`, `)}.`\n    )\n  }\n}\n\nconst mergeFields = ({ typeComposer, fields }) =>\n  Object.entries(fields).forEach(([fieldName, fieldConfig]) => {\n    if (typeComposer.hasField(fieldName)) {\n      typeComposer.extendField(fieldName, fieldConfig)\n    } else {\n      typeComposer.setField(fieldName, fieldConfig)\n    }\n  })\n\nconst mergeResolveType = ({ typeComposer, type }) => {\n  if (\n    (type instanceof GraphQLInterfaceType ||\n      type instanceof GraphQLUnionType) &&\n    type.resolveType\n  ) {\n    typeComposer.setResolveType(type.resolveType)\n  }\n  if (\n    (type instanceof InterfaceTypeComposer ||\n      type instanceof UnionTypeComposer) &&\n    type.getResolveType()\n  ) {\n    typeComposer.setResolveType(type.getResolveType())\n  }\n  if (!typeComposer.getResolveType()) {\n    typeComposer.setResolveType(node => node?.internal?.type)\n  }\n}\n"],"file":"schema.js"}