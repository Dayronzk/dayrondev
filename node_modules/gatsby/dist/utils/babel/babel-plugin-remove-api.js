"use strict";

exports.__esModule = true;
exports.default = void 0;

var _helperPluginUtils = require("@babel/helper-plugin-utils");

var t = _interopRequireWildcard(require("@babel/types"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = (0, _helperPluginUtils.declare)(function removeApiCalls(api, options) {
  var _options$apis;

  api.assertVersion(7);
  const apisToRemove = (_options$apis = options === null || options === void 0 ? void 0 : options.apis) !== null && _options$apis !== void 0 ? _options$apis : [];

  if (!apisToRemove.length) {
    console.warn(`No list of APIs was given to remove, check your plugin options.`);
  }

  return {
    name: `remove-api`,
    visitor: {
      ExportNamedDeclaration(path) {
        const declaration = path.node.declaration;

        if (t.isExportNamedDeclaration(path.node)) {
          const specifiersToKeep = [];
          path.node.specifiers.forEach(specifier => {
            if (t.isExportSpecifier(specifier) && t.isIdentifier(specifier.exported) && apisToRemove.includes(specifier.exported.name)) {
              path.scope.bindings[specifier.local.name].path.remove();
            } else {
              specifiersToKeep.push(specifier);
            }
          });
          path.node.specifiers = specifiersToKeep;
        }

        let apiToCheck;

        if (t.isFunctionDeclaration(declaration) && declaration.id) {
          apiToCheck = declaration.id.name;
        }

        if (t.isVariableDeclaration(declaration) && t.isIdentifier(declaration.declarations[0].id)) {
          apiToCheck = declaration.declarations[0].id.name;
        }

        if (apiToCheck && apisToRemove.includes(apiToCheck)) {
          path.remove();
        }
      }

    }
  };
});

exports.default = _default;
//# sourceMappingURL=babel-plugin-remove-api.js.map