{"version":3,"sources":["../../src/utils/get-server-data.ts"],"names":["getServerData","req","page","pagePath","mod","ensuredLeadingSlash","startsWith","params","matchPath","path","getServerDataArg","headers","Map","Object","entries","method","url","query"],"mappings":";;;;;AAGA;;AAiBO,eAAeA,aAAf,CACLC,GADK,EAILC,IAJK,EAKLC,QALK,EAMLC,GANK,EAOiB;AAAA;;AACtB,MAAI,EAACA,GAAD,aAACA,GAAD,eAACA,GAAG,CAAEJ,aAAN,CAAJ,EAAyB;AACvB,WAAO,EAAP;AACD;;AAED,QAAMK,mBAAmB,GAAGF,QAAQ,CAACG,UAAT,CAAqB,GAArB,IACxBH,QADwB,GAEvB,IAAGA,QAAS,EAFjB;AAIA,QAAM;AAAEI,IAAAA;AAAF,MAAa,kBAAML,IAAI,CAACM,SAAL,IAAkBN,IAAI,CAACO,IAA7B,EAAmCJ,mBAAnC,CAAnB;AAEA,QAAMK,gBAAgB,GAAG;AACvBC,IAAAA,OAAO,EAAE,IAAIC,GAAJ,CAAQC,MAAM,CAACC,OAAP,iBAAeb,GAAf,aAAeA,GAAf,uBAAeA,GAAG,CAAEU,OAApB,uDAA+B,EAA/B,CAAR,CADc;AAEvBI,IAAAA,MAAM,iBAAEd,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEc,MAAP,qDAAkB,KAFD;AAGvBC,IAAAA,GAAG,cAAEf,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEe,GAAP,+CAAe,oCAHK;AAIvBC,IAAAA,KAAK,gBAAEhB,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEgB,KAAP,mDAAgB,EAJE;AAKvBV,IAAAA;AALuB,GAAzB;AAQA,SAAOH,GAAG,CAACJ,aAAJ,CAAkBU,gBAAlB,CAAP;AACD","sourcesContent":["import type { Request } from \"express\"\nimport type { IGatsbyPage } from \"../redux/types\"\n\nimport { match } from \"@gatsbyjs/reach-router/lib/utils\"\n\nexport interface IServerData {\n  headers?: Record<string, string>\n  props?: Record<string, unknown>\n}\n\ninterface IModuleWithServerData {\n  getServerData?: (args: {\n    headers: Map<string, unknown>\n    method: string\n    url: string\n    query?: Record<string, unknown>\n    params?: Record<string, unknown>\n  }) => Promise<IServerData>\n}\n\nexport async function getServerData(\n  req:\n    | Partial<Pick<Request, \"query\" | \"method\" | \"url\" | \"headers\">>\n    | undefined,\n  page: IGatsbyPage,\n  pagePath: string,\n  mod: IModuleWithServerData | undefined\n): Promise<IServerData> {\n  if (!mod?.getServerData) {\n    return {}\n  }\n\n  const ensuredLeadingSlash = pagePath.startsWith(`/`)\n    ? pagePath\n    : `/${pagePath}`\n\n  const { params } = match(page.matchPath || page.path, ensuredLeadingSlash)\n\n  const getServerDataArg = {\n    headers: new Map(Object.entries(req?.headers ?? {})),\n    method: req?.method ?? `GET`,\n    url: req?.url ?? `\"req\" most likely wasn't passed in`,\n    query: req?.query ?? {},\n    params,\n  }\n\n  return mod.getServerData(getServerDataArg)\n}\n"],"file":"get-server-data.js"}