{"version":3,"sources":["../../src/utils/find-page-by-path.ts"],"names":["findPageByPath","state","path","fallbackTo404","pages","page","get","hasLeadingSlash","startsWith","hasTrailingSlash","endsWith","bare","slice","length","some","potentialPath","values","matchPath","undefined"],"mappings":";;;;;AACA;;AAEO,SAASA,cAAT,CACLC,KADK,EAELC,IAFK,EAGLC,aAAsB,GAAG,KAHpB,EAIoB;AACzB,QAAM;AAAEC,IAAAA;AAAF,MAAYH,KAAlB,CADyB,CAGzB;;AACA,MAAII,IAAI,GAAGD,KAAK,CAACE,GAAN,CAAUJ,IAAV,CAAX;;AACA,MAAIG,IAAJ,EAAU;AACR,WAAOA,IAAP;AACD;;AAED,MAAIH,IAAI,KAAM,EAAd,EAAiB;AACf;AACA;AACA;AACAG,IAAAA,IAAI,GAAGD,KAAK,CAACE,GAAN,CAAW,GAAX,CAAP;;AACA,QAAID,IAAJ,EAAU;AACR,aAAOA,IAAP;AACD;AACF,GARD,CASA;AACA;AACA;AAXA,OAYK,IAAIH,IAAI,KAAM,GAAd,EAAkB;AACrB;AACA,UAAMK,eAAe,GAAGL,IAAI,CAACM,UAAL,CAAiB,GAAjB,CAAxB;AACA,UAAMC,gBAAgB,GAAGP,IAAI,CAACQ,QAAL,CAAe,GAAf,CAAzB;AAEA,UAAMC,IAAI,GAAGT,IAAI,CAACU,KAAL,CACXL,eAAe,GAAG,CAAH,GAAO,CADX,EAEXE,gBAAgB,GAAG,CAAC,CAAJ,GAAQP,IAAI,CAACW,MAFlB,CAAb;AAKC,KAACF,IAAD,EAAQ,GAAD,GAAMA,IAAb,EAAmBA,IAAI,GAAI,GAA3B,EAAgC,GAAD,GAAMA,IAAN,GAAc,GAA7C,EAAiDG,IAAjD,CAAsDC,aAAa,IAAI;AACtEV,MAAAA,IAAI,GAAGD,KAAK,CAACE,GAAN,CAAUS,aAAV,CAAP;AACA,aAAO,CAAC,CAACV,IAAT;AACD,KAHA;;AAID,QAAIA,IAAJ,EAAU;AACR,aAAOA,IAAP;AACD;AACF,GAtCwB,CAwCzB;;;AACA,OAAK,MAAMA,IAAX,IAAmBD,KAAK,CAACY,MAAN,EAAnB,EAAmC;AACjC,QAAIX,IAAI,CAACY,SAAL,IAAkB,kBAAMZ,IAAI,CAACY,SAAX,EAAsBf,IAAtB,CAAtB,EAAmD;AACjD,aAAOG,IAAP;AACD;AACF;;AAED,MAAIF,aAAJ,EAAmB;AAAA;;AACjB,8BACEH,cAAc,CAACC,KAAD,EAAS,gBAAT,EAA0B,KAA1B,CADhB,6DAEED,cAAc,CAACC,KAAD,EAAS,WAAT,EAAqB,KAArB,CAFhB;AAID;;AACD,SAAOiB,SAAP;AACD","sourcesContent":["import { IGatsbyPage, IGatsbyState } from \"../redux/types\"\nimport { match } from \"@gatsbyjs/reach-router/lib/utils\"\n\nexport function findPageByPath(\n  state: IGatsbyState,\n  path: string,\n  fallbackTo404: boolean = false\n): IGatsbyPage | undefined {\n  const { pages } = state\n\n  // first check by exact path\n  let page = pages.get(path)\n  if (page) {\n    return page\n  }\n\n  if (path === ``) {\n    // from my tests I never was able to make request with\n    // completely empty pathname, but just for the sake\n    // of completeness - try available alternative\n    page = pages.get(`/`)\n    if (page) {\n      return page\n    }\n  }\n  // Gatsby doesn't allow for page path to be empty string,\n  // so skipping trying to get page for \"\" path if we can't\n  // find page for `/`\n  else if (path !== `/`) {\n    // check various trailing/leading slashes combinations\n    const hasLeadingSlash = path.startsWith(`/`)\n    const hasTrailingSlash = path.endsWith(`/`)\n\n    const bare = path.slice(\n      hasLeadingSlash ? 1 : 0,\n      hasTrailingSlash ? -1 : path.length\n    )\n\n    ;[bare, `/` + bare, bare + `/`, `/` + bare + `/`].some(potentialPath => {\n      page = pages.get(potentialPath)\n      return !!page\n    })\n    if (page) {\n      return page\n    }\n  }\n\n  // we didn't find exact static page, time to check matchPaths\n  for (const page of pages.values()) {\n    if (page.matchPath && match(page.matchPath, path)) {\n      return page\n    }\n  }\n\n  if (fallbackTo404) {\n    return (\n      findPageByPath(state, `/dev-404-page/`, false) ??\n      findPageByPath(state, `/404.html`, false)\n    )\n  }\n  return undefined\n}\n"],"file":"find-page-by-path.js"}