import type { GraphQLEngine } from "../../schema/graphql-engine/entry";
import type { IExecutionResult } from "../../query/types";
import type { IGatsbyPage } from "../../redux/types";
import type { IScriptsAndStyles } from "../client-assets-for-template";
import type { IPageDataWithQueryResult } from "../page-data";
import type { Request } from "express";
import "../engines-fs-provider";
export interface ITemplateDetails {
    query: string;
    staticQueryHashes: Array<string>;
    assets: IScriptsAndStyles;
}
export interface ISSRData {
    results: IExecutionResult;
    page: IGatsbyPage;
    templateDetails: ITemplateDetails;
    potentialPagePath: string;
    serverDataHeaders?: Record<string, string>;
}
export declare function getData({ pathName, graphqlEngine, req, }: {
    graphqlEngine: GraphQLEngine;
    pathName: string;
    req?: Partial<Pick<Request, "query" | "method" | "url" | "headers">>;
}): Promise<ISSRData>;
export declare function renderPageData({ data, }: {
    data: ISSRData;
}): Promise<IPageDataWithQueryResult>;
export declare function renderHTML({ data, pageData, }: {
    data: ISSRData;
    pageData?: IPageDataWithQueryResult;
}): Promise<string>;
