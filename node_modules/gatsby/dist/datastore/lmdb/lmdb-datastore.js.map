{"version":3,"sources":["../../../src/datastore/lmdb/lmdb-datastore.ts"],"names":["lmdbDatastore","getNode","getTypes","countNodes","iterateNodes","iterateNodesByType","updateDataStore","ready","runQuery","getNodes","getNodesByType","preSyncDeletedNodeIdsCache","Set","getDefaultDbPath","dbFileName","process","env","NODE_ENV","FORCE_TEST_DATABASE_ID","JEST_WORKER_ID","cwd","fullDbPath","rootDb","databases","getRootDb","Error","name","path","compression","getDatabases","nodes","openDB","cache","nodesByType","dupSort","metadata","useVersions","indexes","result","Array","from","type","nodesDb","GatsbyIterable","getKeys","snapshot","map","nodeId","undefined","filter","Boolean","getValues","id","has","get","asArray","typeName","stats","getStats","Math","max","Number","entryCount","size","getValuesCount","args","GATSBY_EXPERIMENTAL_LMDB_INDEXES","datastore","Promise","resolve","lastOperationPromise","action","dbs","transactionSync","clear","clearIndexes","operationPromise","all","delete","payload","add","then","setupLmdbStore","dbPath","state","Map","emitter","on"],"mappings":"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","sourcesContent":["import { RootDatabase, open, ArrayLikeIterable } from \"lmdb-store\"\n// import { performance } from \"perf_hooks\"\nimport { ActionsUnion, IGatsbyNode } from \"../../redux/types\"\nimport { updateNodes } from \"./updates/nodes\"\nimport { updateNodesByType } from \"./updates/nodes-by-type\"\nimport { IDataStore, ILmdbDatabases, IQueryResult } from \"../types\"\nimport { emitter, replaceReducer } from \"../../redux\"\nimport { GatsbyIterable } from \"../common/iterable\"\nimport { doRunQuery } from \"./query/run-query\"\nimport {\n  IRunFilterArg,\n  runFastFiltersAndSort,\n} from \"../in-memory/run-fast-filters\"\n\nconst lmdbDatastore = {\n  getNode,\n  getTypes,\n  countNodes,\n  iterateNodes,\n  iterateNodesByType,\n  updateDataStore,\n  ready,\n  runQuery,\n\n  // deprecated:\n  getNodes,\n  getNodesByType,\n}\n\nconst preSyncDeletedNodeIdsCache = new Set()\n\nfunction getDefaultDbPath(): string {\n  const dbFileName =\n    process.env.NODE_ENV === `test`\n      ? `test-datastore-${\n          // FORCE_TEST_DATABASE_ID will be set if this gets executed in worker context\n          // when running jest tests. JEST_WORKER_ID will be set when this gets executed directly\n          // in test context (jest will use jest-worker internally).\n          process.env.FORCE_TEST_DATABASE_ID ?? process.env.JEST_WORKER_ID\n        }`\n      : `datastore`\n\n  return process.cwd() + `/.cache/data/` + dbFileName\n}\n\nlet fullDbPath\nlet rootDb\nlet databases\n\nfunction getRootDb(): RootDatabase {\n  if (!rootDb) {\n    if (!fullDbPath) {\n      throw new Error(`LMDB path is not set!`)\n    }\n    rootDb = open({\n      name: `root`,\n      path: fullDbPath,\n      compression: true,\n    })\n  }\n  return rootDb\n}\n\nfunction getDatabases(): ILmdbDatabases {\n  if (!databases) {\n    const rootDb = getRootDb()\n    databases = {\n      nodes: rootDb.openDB({\n        name: `nodes`,\n        // FIXME: sharedStructuresKey breaks tests - probably need some cleanup for it on DELETE_CACHE\n        // sharedStructuresKey: Symbol.for(`structures`),\n        // @ts-ignore\n        cache: true,\n      }),\n      nodesByType: rootDb.openDB({\n        name: `nodesByType`,\n        dupSort: true,\n      }),\n      metadata: rootDb.openDB({\n        name: `metadata`,\n        useVersions: true,\n      }),\n      indexes: rootDb.openDB({\n        name: `indexes`,\n        // TODO: use dupSort when this is ready: https://github.com/DoctorEvidence/lmdb-store/issues/66\n        // dupSort: true\n      }),\n    }\n  }\n  return databases\n}\n\n/**\n * @deprecated\n */\nfunction getNodes(): Array<IGatsbyNode> {\n  // const start = performance.now()\n  const result = Array.from<IGatsbyNode>(iterateNodes())\n  // const timeTotal = performance.now() - start\n  // console.warn(\n  //   `getNodes() is deprecated, use iterateNodes() instead; ` +\n  //     `array length: ${result.length}; time(ms): ${timeTotal}`\n  // )\n  return result ?? []\n}\n\n/**\n * @deprecated\n */\nfunction getNodesByType(type: string): Array<IGatsbyNode> {\n  // const start = performance.now()\n  const result = Array.from<IGatsbyNode>(iterateNodesByType(type))\n  // const timeTotal = performance.now() - start\n  // console.warn(\n  //   `getNodesByType() is deprecated, use iterateNodesByType() instead; ` +\n  //     `array length: ${result.length}; time(ms): ${timeTotal}`\n  // )\n  return result ?? []\n}\n\nfunction iterateNodes(): GatsbyIterable<IGatsbyNode> {\n  // Additionally fetching items by id to leverage lmdb-store cache\n  const nodesDb = getDatabases().nodes\n  return new GatsbyIterable(\n    nodesDb\n      .getKeys({ snapshot: false })\n      .map(nodeId => (typeof nodeId === `string` ? getNode(nodeId) : undefined))\n      .filter(Boolean) as ArrayLikeIterable<IGatsbyNode>\n  )\n}\n\nfunction iterateNodesByType(type: string): GatsbyIterable<IGatsbyNode> {\n  const nodesByType = getDatabases().nodesByType\n  return new GatsbyIterable(\n    nodesByType\n      .getValues(type)\n      .map(nodeId => getNode(nodeId))\n      .filter(Boolean) as ArrayLikeIterable<IGatsbyNode>\n  )\n}\n\nfunction getNode(id: string): IGatsbyNode | undefined {\n  if (!id || preSyncDeletedNodeIdsCache.has(id)) {\n    return undefined\n  }\n\n  const { nodes } = getDatabases()\n  return nodes.get(id)\n}\n\nfunction getTypes(): Array<string> {\n  return getDatabases().nodesByType.getKeys({}).asArray\n}\n\nfunction countNodes(typeName?: string): number {\n  if (!typeName) {\n    const stats = getDatabases().nodes.getStats() as { entryCount: number }\n    return Math.max(\n      Number(stats.entryCount) - preSyncDeletedNodeIdsCache.size,\n      0\n    ) // FIXME: add -1 when restoring shared structures key\n  }\n\n  const { nodesByType } = getDatabases()\n  return nodesByType.getValuesCount(typeName)\n}\n\nasync function runQuery(args: IRunFilterArg): Promise<IQueryResult> {\n  if (process.env.GATSBY_EXPERIMENTAL_LMDB_INDEXES) {\n    return await doRunQuery({\n      datastore: lmdbDatastore,\n      databases: getDatabases(),\n      ...args,\n    })\n  }\n  return Promise.resolve(runFastFiltersAndSort(args))\n}\n\nlet lastOperationPromise: Promise<any> = Promise.resolve()\n\nfunction updateDataStore(action: ActionsUnion): void {\n  switch (action.type) {\n    case `DELETE_CACHE`: {\n      const dbs = getDatabases()\n      // Force sync commit\n      dbs.nodes.transactionSync(() => {\n        dbs.nodes.clear()\n        dbs.nodesByType.clear()\n        dbs.metadata.clear()\n        dbs.indexes.clear()\n      })\n      break\n    }\n    case `SET_PROGRAM`: {\n      // TODO: remove this when we have support for incremental indexes in lmdb\n      clearIndexes()\n      break\n    }\n    case `CREATE_NODE`:\n    case `DELETE_NODE`:\n    case `ADD_FIELD_TO_NODE`:\n    case `ADD_CHILD_NODE_TO_PARENT_NODE`: {\n      const dbs = getDatabases()\n      const operationPromise = Promise.all([\n        updateNodes(dbs.nodes, action),\n        updateNodesByType(dbs.nodesByType, action),\n      ])\n      lastOperationPromise = operationPromise\n\n      // if create is used in the same transaction as delete we should remove it from cache\n      if (action.type === `CREATE_NODE`) {\n        preSyncDeletedNodeIdsCache.delete(action.payload.id)\n      }\n\n      if (action.type === `DELETE_NODE` && action.payload?.id) {\n        preSyncDeletedNodeIdsCache.add(action.payload.id)\n        operationPromise.then(() => {\n          // only clear if no other operations have been done in the meantime\n          if (lastOperationPromise === operationPromise) {\n            preSyncDeletedNodeIdsCache.clear()\n          }\n        })\n      }\n    }\n  }\n}\n\nfunction clearIndexes(): void {\n  const dbs = getDatabases()\n  dbs.nodes.transactionSync(() => {\n    dbs.metadata.clear()\n    dbs.indexes.clear()\n  })\n}\n\n/**\n * Resolves when all the data is synced\n */\nasync function ready(): Promise<void> {\n  await lastOperationPromise\n}\n\nexport function setupLmdbStore({\n  dbPath = getDefaultDbPath(),\n}: { dbPath?: string } = {}): IDataStore {\n  fullDbPath = dbPath\n\n  replaceReducer({\n    nodes: (state = new Map(), action) =>\n      action.type === `DELETE_CACHE` ? new Map() : state,\n    nodesByType: (state = new Map(), action) =>\n      action.type === `DELETE_CACHE` ? new Map() : state,\n  })\n  emitter.on(`*`, action => {\n    if (action) {\n      updateDataStore(action)\n    }\n  })\n  // TODO: remove this when we have support for incremental indexes in lmdb\n  clearIndexes()\n  return lmdbDatastore\n}\n"],"file":"lmdb-datastore.js"}